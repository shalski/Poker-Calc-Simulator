import random
game_check=0
counter=0
figures=["A","J","Q","K",2,3,4,5,6,7,8,9,10]
colors=["Diamonds","Clubs","Spades","Hearts"]
deck=[]
hand_1=[]
figure_check=[1,2,3,4,5,6,7,8,9,10,11,12,13,1]
straight_check=[]
for i in range(0,10):
    temp_list=[]
    for j in range(0,5):
        temp_list.append(figure_check[i+j])
    straight_check.append(temp_list)
    temp_list=[]#straight_check build
def deck_build():
    for i in range(0,13):
        for j in range(0,4):
            deck.append([str(figures[i]),(colors[j])])
def card_to_num(hand):
    for i in range(0,5):
        if(hand[i][0]=="A"):
            hand[i][0]=1
        elif(hand[i][0]=="J"):
            hand[i][0]=11
        elif(hand[i][0]=="Q"):
            hand[i][0]=12
        elif(hand[i][0]=="K"):
            hand[i][0]=13
        else:
            hand[i][0]=int(hand[i][0])
    for i in range(0,5):
        if(hand[i][1]=="Hearts"):
            hand[i][1]=1
        elif(hand[i][1]=="Diamonds"):
            hand[i][1]=2
        elif(hand[i][1]=="Spades"):
            hand[i][1]=3
        elif(hand[i][1]=="Clubs"):
            hand[i][1]=4
        else:
            pass
def card_draw(x,hand):#(deck,hand)
    for i in range(0,5):
        val=random.randint(0,len(x)-1)
        hand.append(deck[val])
        del(deck[val])
    card_to_num(hand)
    hand.sort()
    
            
def high_card(x):
    global best
    best=1
def one_pair(x):
    global best
    for i in range(0,3):
        if(x[i][0]==x[i+1][0]):
            best=2
        else:
            pass
def two_pairs(x):
    global best
    if(x[0][0]==x[1][0]):
        if(x[2][0]==x[3][0]):
            best=3
        elif(x[3][0]==x[4][0]):
            best=3
        else:
            pass
    elif(x[1][0]==x[2][0] and x[3][0]==x[4][0]):
        best=3
    else:
        pass
def three_of_a_kind(x):
    global best
    if(x[0][0]==x[2][0]):
        best=4
    elif(x[1][0]==x[3][0]):
        best=4
    elif([2][0]==x[4][0]):
        best=4
    else:
        pass
def straight(x):
    global best
    temp_list=[]
    for i in range(0,4):
        temp_list.append(x[i][0])
    if(temp_list in straight_check):
        best=5
    temp_list=[]
def flush(x):
    global best
    if(x[0][1]==x[1][1]==x[2][1]==x[3][1]==x[4][1]):
        best=6
def full_house(x):
    global best
    if(x[0][0]==x[1][0] and x[2][0]==x[4][0]):
        best=7
    elif(x[0][0]==x[2][0] and x[3][0]==x[4][0]):
        best=7
    else:
        pass
def four_of_a_kind(x):
    global best
    if(x[0][0]==x[3][0] or x[1][0]==x[4][0]):
        best=8
def straight_flush(x):
    global best
    temp_list=[]
    for i in range(0,5):
        temp_list.append(x[i][0])
    if(temp_list in straight_check):
        if(x[0][1]==x[1][1]==x[2][1]==x[3][1]==x[4][1]):
            best=9
    temp_list=[]
def royal_flush(x):
    global best
    if(x[0][0]==10 and x[1][0]==11 and x[2][0]==12 and x[3][0]==13 and x[4][0]==1):
        if(x[0][1]==x[1][1]==x[2][1]==x[3][1]==x[4][1]):
            best=10
            
def decode_best(x):
    if(x==1):
        print("-")
    if(x==2):
        print("PAIR")
    if(x==3):
        print("TWO PAIRS")
    if(x==4):
        print("STRAIGHT")
    if(x==5):
        print("THREE OF A KIND")
    if(x==6):
        print("FLUSH")
    if(x==7):
        print("FULL_HOUSE")
    if(x==8):
        print("FOUR OF A KIND")
    if(x==9):
        print("STRAIGHT FLUSH")
    if(x==10):
        print("ROYAL FLUSH")
def check_hand(x):
    global best
    best=0
    high_card(x)
    one_pair(x)
    two_pairs(x)
    straight(x)
    three_of_a_kind(x)
    flush(x)
    full_house(x)
    four_of_a_kind(x)
    straight_flush(x)
    royal_flush(x)
    #print(x)
    #decode_best(best)
def odds(odd):
    global best
    hand_1=[]
    odd1=0
    odd2=0
    odd3=0
    odd4=0
    odd5=0
    odd6=0
    odd7=0
    odd8=0
    odd9=0
    odd10=0
    for i in range(0,odd):
        deck_build()
        card_draw(deck,hand_1)
        check_hand(hand_1)
        if(best==1):
            odd1=odd1+1
        if(best==2):
            odd2=odd2+1
        if(best==3):
            odd3=odd3+1
        if(best==4):
            odd4=odd4+1
        if(best==5):
            odd5=odd5+1
        if(best==6):
            odd6=odd6+1
        if(best==7):
            odd7=odd7+1
        if(best==8):
            odd8=odd8+1
        if(best==9):
            odd9=odd9+1
        if(best==10):
            odd10=odd10+1
        hand_1=[]
    #print("-",round(odd1/odd*100,2),"%",odd1)
    #print("PAIR",round(odd2/odd*100,2),"%",odd2)
    #print("TWO PAIRS",round(odd3/odd*100,2),"%",odd3)
    #print("THREE OF A KIND",round(odd4/odd*100,2),"%",odd4)
    #print("STRAIGHT",round(odd5/odd*100,2),"%",odd5)
    #print("FLUSH",round(odd6/odd*100,2),"%",odd6)
    #print("FULL_HOUSE",round(odd7/odd*100,2),"%",odd7)
    #print("FOUR OF A KIND",round(odd8/odd*100,2),"%",odd8)
    #print("STRAIGHT FLUSH",round(odd9/odd*100,2),"%",odd9)
    #print("ROYAL FLUSH",round(odd10/odd*100,2),"%",odd10)
    
    print("-",odd1/odd*100,"%",odd1)
    print("PAIR",odd2/odd*100,"%",odd2)
    print("TWO PAIRS",odd3/odd*100,"%",odd3)
    print("THREE OF A KIND",odd4/odd*100,"%",odd4)
    print("STRAIGHT",odd5/odd*100,"%",odd5)
    print("FLUSH",odd6/odd*100,"%",odd6)
    print("FULL_HOUSE",odd7/odd*100,"%",odd7)
    print("FOUR OF A KIND",odd8/odd*100,"%",odd8)
    print("STRAIGHT FLUSH",odd9/odd*100,"%",odd9)
    print("ROYAL FLUSH",odd10/odd*100,"%",odd10)
    
#deck_build()
#card_draw(deck,hand_1)
#check_hand(hand_1)
#hand_1=[]
print("_________________________________________________________________________")
odds(10000)



